//go:build !wasip1

// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: pkg/auth/api.proto
package auth

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type AuthenticationService interface {
	RequestChallenge(context.Context, *RequestChallengeRequest) (*RequestChallengeResponse, error)
	RespondChallenge(context.Context, *RespondChallengeRequest) (*RespondChallengeResponse, error)
}

func RegisterAuthenticationService(srv *ttrpc.Server, svc AuthenticationService) {
	srv.RegisterService("nri.pkg.auth.v1alpha1.Authentication", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"RequestChallenge": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RequestChallengeRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RequestChallenge(ctx, &req)
			},
			"RespondChallenge": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req RespondChallengeRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.RespondChallenge(ctx, &req)
			},
		},
	})
}

type authenticationClient struct {
	client *ttrpc.Client
}

func NewAuthenticationClient(client *ttrpc.Client) AuthenticationService {
	return &authenticationClient{
		client: client,
	}
}

func (c *authenticationClient) RequestChallenge(ctx context.Context, req *RequestChallengeRequest) (*RequestChallengeResponse, error) {
	var resp RequestChallengeResponse
	if err := c.client.Call(ctx, "nri.pkg.auth.v1alpha1.Authentication", "RequestChallenge", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *authenticationClient) RespondChallenge(ctx context.Context, req *RespondChallengeRequest) (*RespondChallengeResponse, error) {
	var resp RespondChallengeResponse
	if err := c.client.Call(ctx, "nri.pkg.auth.v1alpha1.Authentication", "RespondChallenge", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
